<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chixing.mapper.ReceiveAddressMapper">
  <resultMap id="BaseResultMap" type="com.chixing.entity.ReceiveAddress">
    <id column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="address_name" jdbcType="VARCHAR" property="addressName" />
    <result column="address_detail" jdbcType="VARCHAR" property="addressDetail" />
    <result column="client_name" jdbcType="VARCHAR" property="clientName" />
    <result column="client_id" jdbcType="INTEGER" property="clientId" />
    <result column="default_address" jdbcType="INTEGER" property="defaultAddress" />
    <result column="fields1" jdbcType="INTEGER" property="fields1" />
    <result column="fields2" jdbcType="VARCHAR" property="fields2" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.chixing.entity.ReceiveAddress">
    <result column="client_telephone" jdbcType="LONGVARCHAR" property="clientTelephone" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    address_id, address_name, address_detail, client_name, client_id, default_address, 
    fields1, fields2
  </sql>
  <sql id="Blob_Column_List">
    client_telephone
  </sql>

  <select id="selectDefaultAddress" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT *
    FROM receive_address
    where client_id=#{clientId,jdbcType=INTEGER} AND default_address=1 AND fields1=1
  </select>

  <select id="selectClientAddress" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT *
    FROM receive_address
    where client_id=#{clientId,jdbcType=INTEGER} AND fields1=1
  </select>

  <select id="selectClient2Address" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT *
    FROM receive_address
    where client_id=#{clientId,jdbcType=INTEGER} AND fields1=1
  </select>

  <select id="selectAddressCounts" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT count(address_id)
    FROM receive_address
    where client_id=#{clientId,jdbcType=INTEGER} AND fields1=1
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from receive_address
    where address_id = #{addressId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from receive_address
    where address_id = #{addressId,jdbcType=INTEGER}
  </delete>
  <update id="updateByPrimaryKey" parameterType="com.chixing.entity.ReceiveAddress">
    update receive_address
    set address_name = #{addressName,jdbcType=VARCHAR},
        address_detail = #{addressDetail,jdbcType=VARCHAR},
        client_name = #{clientName,jdbcType=VARCHAR},
        client_id = #{clientId,jdbcType=INTEGER},
        default_address = #{defaultAddress,jdbcType=INTEGER},
        fields1 = #{fields1,jdbcType=INTEGER},
        fields2 = #{fields2,jdbcType=VARCHAR}
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
  <insert id="insert" parameterType="com.chixing.entity.ReceiveAddress">
    insert into receive_address (address_id, address_name, address_detail,
      client_name, client_id, default_address,
      fields1, fields2, client_telephone
      )
    values (#{addressId,jdbcType=INTEGER}, #{addressName,jdbcType=VARCHAR}, #{addressDetail,jdbcType=VARCHAR},
      #{clientName,jdbcType=VARCHAR}, #{clientId,jdbcType=INTEGER}, #{defaultAddress,jdbcType=INTEGER},
      #{fields1,jdbcType=INTEGER}, #{fields2,jdbcType=VARCHAR}, #{clientTelephone,jdbcType=LONGVARCHAR}
      )
  </insert>















































  <select id="selectByExampleWithBLOBs" parameterType="com.chixing.entity.ReceiveAddressExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from receive_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.chixing.entity.ReceiveAddressExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from receive_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.chixing.entity.ReceiveAddressExample">
    delete from receive_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.chixing.entity.ReceiveAddress">
    insert into receive_address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="addressId != null">
        address_id,
      </if>
      <if test="addressName != null">
        address_name,
      </if>
      <if test="addressDetail != null">
        address_detail,
      </if>
      <if test="clientName != null">
        client_name,
      </if>
      <if test="clientId != null">
        client_id,
      </if>
      <if test="defaultAddress != null">
        default_address,
      </if>
      <if test="fields1 != null">
        fields1,
      </if>
      <if test="fields2 != null">
        fields2,
      </if>
      <if test="clientTelephone != null">
        client_telephone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="addressName != null">
        #{addressName,jdbcType=VARCHAR},
      </if>
      <if test="addressDetail != null">
        #{addressDetail,jdbcType=VARCHAR},
      </if>
      <if test="clientName != null">
        #{clientName,jdbcType=VARCHAR},
      </if>
      <if test="clientId != null">
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="defaultAddress != null">
        #{defaultAddress,jdbcType=INTEGER},
      </if>
      <if test="fields1 != null">
        #{fields1,jdbcType=INTEGER},
      </if>
      <if test="fields2 != null">
        #{fields2,jdbcType=VARCHAR},
      </if>
      <if test="clientTelephone != null">
        #{clientTelephone,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.chixing.entity.ReceiveAddressExample" resultType="java.lang.Long">
    select count(*) from receive_address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update receive_address
    <set>
      <if test="record.addressId != null">
        address_id = #{record.addressId,jdbcType=INTEGER},
      </if>
      <if test="record.addressName != null">
        address_name = #{record.addressName,jdbcType=VARCHAR},
      </if>
      <if test="record.addressDetail != null">
        address_detail = #{record.addressDetail,jdbcType=VARCHAR},
      </if>
      <if test="record.clientName != null">
        client_name = #{record.clientName,jdbcType=VARCHAR},
      </if>
      <if test="record.clientId != null">
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.defaultAddress != null">
        default_address = #{record.defaultAddress,jdbcType=INTEGER},
      </if>
      <if test="record.fields1 != null">
        fields1 = #{record.fields1,jdbcType=INTEGER},
      </if>
      <if test="record.fields2 != null">
        fields2 = #{record.fields2,jdbcType=VARCHAR},
      </if>
      <if test="record.clientTelephone != null">
        client_telephone = #{record.clientTelephone,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update receive_address
    set address_id = #{record.addressId,jdbcType=INTEGER},
      address_name = #{record.addressName,jdbcType=VARCHAR},
      address_detail = #{record.addressDetail,jdbcType=VARCHAR},
      client_name = #{record.clientName,jdbcType=VARCHAR},
      client_id = #{record.clientId,jdbcType=INTEGER},
      default_address = #{record.defaultAddress,jdbcType=INTEGER},
      fields1 = #{record.fields1,jdbcType=INTEGER},
      fields2 = #{record.fields2,jdbcType=VARCHAR},
      client_telephone = #{record.clientTelephone,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update receive_address
    set address_id = #{record.addressId,jdbcType=INTEGER},
      address_name = #{record.addressName,jdbcType=VARCHAR},
      address_detail = #{record.addressDetail,jdbcType=VARCHAR},
      client_name = #{record.clientName,jdbcType=VARCHAR},
      client_id = #{record.clientId,jdbcType=INTEGER},
      default_address = #{record.defaultAddress,jdbcType=INTEGER},
      fields1 = #{record.fields1,jdbcType=INTEGER},
      fields2 = #{record.fields2,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.chixing.entity.ReceiveAddress">
    update receive_address
    <set>
      <if test="addressName != null">
        address_name = #{addressName,jdbcType=VARCHAR},
      </if>
      <if test="addressDetail != null">
        address_detail = #{addressDetail,jdbcType=VARCHAR},
      </if>
      <if test="clientName != null">
        client_name = #{clientName,jdbcType=VARCHAR},
      </if>
      <if test="clientId != null">
        client_id = #{clientId,jdbcType=INTEGER},
      </if>
      <if test="defaultAddress != null">
        default_address = #{defaultAddress,jdbcType=INTEGER},
      </if>
      <if test="fields1 != null">
        fields1 = #{fields1,jdbcType=INTEGER},
      </if>
      <if test="fields2 != null">
        fields2 = #{fields2,jdbcType=VARCHAR},
      </if>
      <if test="clientTelephone != null">
        client_telephone = #{clientTelephone,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.chixing.entity.ReceiveAddress">
    update receive_address
    set address_name = #{addressName,jdbcType=VARCHAR},
      address_detail = #{addressDetail,jdbcType=VARCHAR},
      client_name = #{clientName,jdbcType=VARCHAR},
      client_id = #{clientId,jdbcType=INTEGER},
      default_address = #{defaultAddress,jdbcType=INTEGER},
      fields1 = #{fields1,jdbcType=INTEGER},
      fields2 = #{fields2,jdbcType=VARCHAR},
      client_telephone = #{clientTelephone,jdbcType=LONGVARCHAR}
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>

</mapper>